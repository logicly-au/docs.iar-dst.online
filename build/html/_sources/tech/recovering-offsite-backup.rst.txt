Recovering From Offsite Backup
==============================

Please check the date on this page and compare to the date on the wiki to make sure it is current. (If possible)

The revision information for this document is: r7 - 10 Sep 2014

.. toctree::
   :caption: Table of Contents
   :maxdepth: 4

   recovering-offsite-backup


Hardware Pre-Requisites
------------------------

* Computer

* USB Port (2 or 3) of course 3 will be faster

* enough space to recover at least one image - this depends on which machine is to be recovered, filserver would take 3T while a 

* load balancer would take 8G

* if you need to scan the paper data matrix keys a scanner

* if you are using the cd keys a CDROM / DVD drive


Software Pre-Requisites
------------------------

* GNU/Linux Operating System

Packages
^^^^^^^^^

* gnugpg

* cryptsetup (for luks)

* rsync

Packages for extracting the data matrix keys
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* libdmtx-utils

* pdftk

* poppler-utils

Mounting the Disc
-----------------

Introduction
^^^^^^^^^^^^^

The Disc contains 2 partitions

* The first partition on the disc is NOT encrypted it is an ext4 partition and contains the key to unlock the encypted partition and some useful scripts.

* The second partition is a LUKS encrypted partition.

The basics summary:

* obtain the luks key

   * in the first partition of the disc (gpg encrypted)

   * from mel-vault01 (id is the uuid of the disc)

* use the luks key to decrypt and mount the partition

* there will be directories labeled for each machine, within these directories there will be a tree directory which contains an rsync of the machine.

Recover a Directors gpg key
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

**From CD**

The private key is copied 1,000 times on the CD, they are named secret-key-{n}.text where {n} is a number from 0001-1000. Import one of these into your GPG install

**From USB memory stick**

The private key is copied 1,000 times on the USB memory stick, they are named secret-key-{n}.text where {n} is a number from 0001-1000. Import one of these into your GPG install

**From Printouts**

This is in Data Matrix format. The key is designed for scanning and electronic reconstruction. This procedure requires a computer system and scanner that are in a known environment; e.g. Director home system is considered ok; system administrator home system is ok subject to Director approval; internet cafe is not appropriate.

Install the ``libdmtx-utils``, ``pdftk``, and ``poppler-utils`` packages.

Recovery is done by scanning the pages to produce a PDF with all pages in sequence prior to extracting the data.

* ``pdftk scan.pdf burst`` make separate pages

* ``dmtxread`` scan file for Data Matrix data and decode

  ::

	   ] pdftk scan.pdf burst
	   ] for file in pg_*.pdf; do dmtxread $file > $file.text; done
	   ] cat *.text > secret-key.gpg
	   ] # now import secret-key.gpg into your GPG install.

*Hints*

* Scan quality matters, in testing the digital scanner was rather hit / miss - the cannon had a better success rate.

* Skew matters, sometimes a scan will be slightly skewed going through the hopper these will not decode - try one at a time or putting them square on the glass.

* check the file sizes before concatenating the file - all but the last file should be exactly 800.

    ::

	    32123 Sep  6 12:27 pg_0001.pdf
	      800 Sep  6 12:27 pg_0001.pdf.text
	    31839 Sep  6 12:27 pg_0002.pdf
	      800 Sep  6 12:27 pg_0002.pdf.text
	    32250 Sep  6 12:27 pg_0003.pdf
	      800 Sep  6 12:27 pg_0003.pdf.text
	    31403 Sep  6 12:27 pg_0004.pdf
	      800 Sep  6 12:27 pg_0004.pdf.text
	    31943 Sep  6 12:27 pg_0005.pdf
	      800 Sep  6 12:27 pg_0005.pdf.text
	    31711 Sep  6 12:27 pg_0006.pdf
	      800 Sep  6 12:27 pg_0006.pdf.text
	    31916 Sep  6 12:27 pg_0007.pdf
	      800 Sep  6 12:27 pg_0007.pdf.text
	    32284 Sep  6 12:27 pg_0008.pdf
	        0 Sep  6 12:27 pg_0008.pdf.text
	    14085 Sep  6 12:27 pg_0009.pdf
	      240 Sep  6 12:27 pg_0009.pdf.text
	
   * page 8 will need to be re-scanned

* re-scan those that have not worked - playing with settings for dmxtread did not yield better results.

* although these are related to QR codes they are not QR codes and cannot be read with a QR reader

**Importing GPG key into your keyring**

* Make sure gnugpg is installed.

* Make sure the machine you are using is secure.

* ``gpg --import ./secret-key-0001.text`` where ./secret-key-0001.text is the secret key file (with path)

   * the key will be imported into your keyring the files for this are in $HOME/.gnupg

**Decrypting the Luks Key**

* change to the root user on the machine you are using ``sudo -i``

* look at what discs are currently available ``ls -al /dev/disk/by-id``

   * sample:

    ::

	    root@thabit:/dev/disk/by-id# ls -al
	    total 0
	    drwxr-xr-x 2 root root 420 Sep  5 14:16 .
			drwxr-xr-x 6 root root 120 Sep  5 14:02 ..
			lrwxrwxrwx 1 root root   9 Sep  5 14:02 ata-OPTIARC_DVD_RW_AD-5670S -> ../../sr0
			lrwxrwxrwx 1 root root   9 Sep  5 14:05 ata-ST3250318AS_6VMEHRQR -> ../../sdb
			lrwxrwxrwx 1 root root   9 Sep  5 14:05 ata-WDC_WD6400AAKS-40H2B0_WD-WMASY5768714 -> ../../sda
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 ata-WDC_WD6400AAKS-40H2B0_WD-WMASY5768714-part1 -> ../../sda1
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 ata-WDC_WD6400AAKS-40H2B0_WD-WMASY5768714-part2 -> ../../sda2
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 ata-WDC_WD6400AAKS-40H2B0_WD-WMASY5768714-part3 -> ../../sda3
			lrwxrwxrwx 1 root root  10 Aug 30 13:01 dm-name-luks-f0f5aeaf-ea52-47da-b58e-c8cee2644e70 -> ../../dm-2
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 dm-name-ubuntu--vg-root -> ../../dm-0
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 dm-name-ubuntu--vg-swap_1 -> ../../dm-1
			lrwxrwxrwx 1 root root  10 Aug 30 13:01      
			dm-uuid-CRYPT-LUKS1-f0f5aeafea5247dab58ec8cee2644e70-luks-f0f5aeaf-ea52-47da-b58e-c8cee2644e70 -> ../../dm-2
	    lrwxrwxrwx 1 root root  10 Aug 30 12:59 dm-uuid-LVM-cKetAlxAidtQQW7LmcUHOoEjmSq8AiOcjy59zLDAIeQNsV1bQ4WrnRUHlYLMS3lP -> ../../dm-1
	    lrwxrwxrwx 1 root root  10 Aug 30 12:59 dm-uuid-LVM-cKetAlxAidtQQW7LmcUHOoEjmSq8AiOcnZN4XhNFKiemsnTaEO1dikMycE4OMjZR -> ../../dm-0
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 usb-Seagate_FreeAgent_2GEWKTN6-0:0-part1 -> ../../sdb1
			lrwxrwxrwx 1 root root  10 Aug 30 13:01 usb-Seagate_FreeAgent_2GEWKTN6-0:0-part2 -> ../../sdb2
			lrwxrwxrwx 1 root root   9 Sep  5 14:05 wwn-0x5000c50022b9f139 -> ../../sdb
			lrwxrwxrwx 1 root root   9 Sep  5 14:05 wwn-0x50014ee00103d180 -> ../../sda
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 wwn-0x50014ee00103d180-part1 -> ../../sda1
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 wwn-0x50014ee00103d180-part2 -> ../../sda2
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 wwn-0x50014ee00103d180-part3 -> ../../sda3
			
   * as can be seen from the above I already have an encypted luks partition mounted.

* plug in the external disc - there is a usb cable and power supply with each directors "kit"

* lets look at the available devices again and look for the new device ``ls -al /dev/disk/by-id``

    ::

      root@thabit:/dev/disk/by-id# ls -al
			total 0
			drwxr-xr-x 2 root root 480 Sep  8 11:28 .
			drwxr-xr-x 8 root root 160 Sep  8 11:28 ..
			lrwxrwxrwx 1 root root   9 Sep  5 14:02 ata-OPTIARC_DVD_RW_AD-5670S -> ../../sr0
			lrwxrwxrwx 1 root root   9 Sep  5 14:05 ata-ST3250318AS_6VMEHRQR -> ../../sdb
			lrwxrwxrwx 1 root root   9 Sep  5 14:05 ata-WDC_WD6400AAKS-40H2B0_WD-WMASY5768714 -> ../../sda
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 ata-WDC_WD6400AAKS-40H2B0_WD-WMASY5768714-part1 -> ../../sda1
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 ata-WDC_WD6400AAKS-40H2B0_WD-WMASY5768714-part2 -> ../../sda2
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 ata-WDC_WD6400AAKS-40H2B0_WD-WMASY5768714-part3 -> ../../sda3
			lrwxrwxrwx 1 root root  10 Aug 30 13:01 dm-name-luks-f0f5aeaf-ea52-47da-b58e-c8cee2644e70 -> ../../dm-2
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 dm-name-ubuntu--vg-root -> ../../dm-0
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 dm-name-ubuntu--vg-swap_1 -> ../../dm-1
			lrwxrwxrwx 1 root root  10 Aug 30 13:01 
			dm-uuid-CRYPT-LUKS1-f0f5aeafea5247dab58ec8cee2644e70-luks-f0f5aeaf-ea52-47da-b58e-c8cee2644e70 -> ../../dm-2
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 dm-uuid-LVM-cKetAlxAidtQQW7LmcUHOoEjmSq8AiOcjy59zLDAIeQNsV1bQ4WrnRUHlYLMS3lP -> ../../dm-1
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 dm-uuid-LVM-cKetAlxAidtQQW7LmcUHOoEjmSq8AiOcnZN4XhNFKiemsnTaEO1dikMycE4OMjZR -> ../../dm-0
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 usb-Seagate_FreeAgent_2GEWKTN6-0:0-part1 -> ../../sdb1
			lrwxrwxrwx 1 root root  10 Aug 30 13:01 usb-Seagate_FreeAgent_2GEWKTN6-0:0-part2 -> ../../sdb2
			lrwxrwxrwx 1 root root   9 Sep  8 11:28 usb-WD_My_Book_1140_504C323333314C4147374A33444A-0:0 -> ../../sdc
			lrwxrwxrwx 1 root root  10 Sep  8 11:28 usb-WD_My_Book_1140_504C323333314C4147374A33444A-0:0-part1 -> ../../sdc1
			lrwxrwxrwx 1 root root  10 Sep  8 11:28 usb-WD_My_Book_1140_504C323333314C4147374A33444A-0:0-part2 -> ../../sdc2
			lrwxrwxrwx 1 root root   9 Sep  5 14:05 wwn-0x5000c50022b9f139 -> ../../sdb
			lrwxrwxrwx 1 root root   9 Sep  5 14:05 wwn-0x50014ee00103d180 -> ../../sda
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 wwn-0x50014ee00103d180-part1 -> ../../sda1
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 wwn-0x50014ee00103d180-part2 -> ../../sda2
			lrwxrwxrwx 1 root root  10 Aug 30 12:59 wwn-0x50014ee00103d180-part3 -> ../../sda3
			
   * you can see the new device is /dev/sdc - this will be different depending on the devices on your machine.

    ::

      lrwxrwxrwx 1 root root   9 Sep  8 11:28 usb-WD_My_Book_1140_504C323333314C4147374A33444A-0:0 -> ../../sdc
			lrwxrwxrwx 1 root root  10 Sep  8 11:28 usb-WD_My_Book_1140_504C323333314C4147374A33444A-0:0-part1 -> ../../sdc1
			lrwxrwxrwx 1 root root  10 Sep  8 11:28 usb-WD_My_Book_1140_504C323333314C4147374A33444A-0:0-part2 -> ../../sdc2
			
   * we can now refer to the disc by either /dev/sdc or /dev/disk/by-id/usb-WD_My_Book_1140_504C323333314C4147374A33444A-0:0

   * we can refer to the first (non-encrypted) partition as /dev/sdc1 or /dev/disk/by-id/usb-WD_My_Book_1140_504C323333314C4147374A33444A-0:0-part1

   * we can refer to the second (encrypted) partiion as /dev/sdc2 or /dev/disk/by-id/usb-WD_My_Book_1140_504C323333314C4147374A33444A-0:0-part2

* create directory to mount the disc to mkdir ``-p /mnt/backup_key``

* if we are being security conscious then the un-encrypted luks key should not be written to disc it should be written to a ramdisk

   * create a directory to mount the ram disc to ``mkdir -p /mnt/volatile``

   * ``mount -t tmpfs -o size=10M tmpfs /mnt/volatile``

* mount the first partition on the disk ``mount -t ext4 /dev/sdc1 /mnt/backup_key`` OR ``mount -t ext4 /dev/disk/by-id/usb-WD_My_Book_1140_504C323333314C4147374A33444A-0:0-part1 /mnt/backup_key``

   ::

	    ] mount -t ext4 /dev/sdc1 /mnt/backup_key
	    ] cd /mnt/backup_key
	    ] ls
	    keyfile.gpg  lost+found  offsite-backup

   * where keyfile.gpg is the encrypted luks key and offsite-backup is a directory containing useful scripts

* decrypt the key ``gpg --homedir /home/stephenh/.gnupg --decrypt -o "/mnt/volatile/keyfile" /mnt/backup_key/keyfile.gpg``

Decrypt the luks partition
^^^^^^^^^^^^^^^^^^^^^^^^^^^

* decrypt the encrypted partition ``cryptsetup luksOpen /dev/sdc2 "backup_disk" --key-file "/mnt/volatile/keyfile"``

Mount the decrypted partition
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* create mount point for backup_disk ``mkdir -p /mnt/backup_disk``

* mount the decrypted partition ``mount "/dev/mapper/backup_disk" /mnt/backup_disk``

Recover Machine from Backup Disc
---------------------------------

The backup disc contains a directory for each machine. Within each machine directory is a directory tree in this directory is an rsync of the machine. To recover this you would:

* install a base GNU/linux operating system on the target machine

* make sure rsync and ssh is installed

* rsync contents of tree directory over the top of the base install

Find out type of base system to install
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* ``cat /mnt/backup_disk/[machine name]/tree/etc/os-release``

* sample ubuntu output

    ::

	    NAME="Ubuntu"
			VERSION="12.04.5 LTS, Precise Pangolin"
			ID=ubuntu
			ID_LIKE=debian
			PRETTY_NAME="Ubuntu precise (12.04.5 LTS)"
			VERSION_ID="12.04"
			
* sample debian output

    ::

			PRETTY_NAME="Debian GNU/Linux 7 (wheezy)"
			NAME="Debian GNU/Linux"
			VERSION_ID="7"
			VERSION="7 (wheezy)"
			ID=debian
			ANSI_COLOR="1;31"
			HOME_URL="http://www.debian.org/"
			SUPPORT_URL="http://www.debian.org/support/"
			BUG_REPORT_URL="http://bugs.debian.org/"
			
Install a base system
^^^^^^^^^^^^^^^^^^^^^^

* for debian use a netinstall disc closest in version to the result of the above command

* for ubuntu use the server install disc closest in version to the result of the above command

* follow the instructions / prompts for the distribution you are installing

* install openSSH and rsync
   
   * ``apt-get install openssh-server rsync``

* rsync the contents of the tree directory over the newly created system

   * ``rsync -av --numeric-ids [source]/ [destination]``

   * do not use ``[source]/*`` as this will miss . files

   * do not use H for hardlinks as dirvish uses hardlinks to dedupe
